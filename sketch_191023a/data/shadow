  if (tmp[0][0] != null) {
      y = (tmp[0][0].getY() - tmp[0][0].getSizeY()/2) - 1;
      float start = 0, end = 0;//
      float objEdgeX = x, objEdgeZ = z;
      float XL = acos((tmp[0][0].getX()- tmp[0][0].getSizeX()/2 - x)/size);//z軸と平行な直線のx座標
      float XH = acos((tmp[0][0].getX()+ tmp[0][0].getSizeX()/2 - x)/size);//from 0 to PI 
      float ZL = asin((tmp[0][0].getZ()- tmp[0][0].getSizeZ()/2 - z)/size);//from -PI/2 to PI/2
      float ZH = asin((tmp[0][0].getZ()+ tmp[0][0].getSizeZ()/2 - z)/size);
      boolean onXL = !Float.isNaN(XL);//値が虚数になる（実数解をもたない）なら接してない
      boolean onXH = !Float.isNaN(XH);
      boolean onZL = !Float.isNaN(ZL);
      boolean onZH = !Float.isNaN(ZH);
      if (!onXL && onXH && onZL && !onZH) {
        start = XH;
        end = PI - ZL;
        objEdgeX = tmp[0][0].getX()+ tmp[0][0].getSizeX()/2;
        objEdgeZ = tmp[0][0].getZ()- tmp[0][0].getSizeZ()/2;
      }
      //println(onXH, onZH);
      //println(start, end);
      if (start < end) {//両方の直線に影が接触しており[0][0]のマスには影が存在する場合の条件式

        fill(0);
        noStroke();
        beginShape();
        vertex(objEdgeX, y, objEdgeZ);
        vertex(x + size*cos(start), y, z + size*sin(start));
        for (float theta = start; theta < end; theta += 0.1) {
          vertex(x + size*cos(theta), y, z + size*sin(theta));
        }
        vertex(x + size*cos(end), y, z + size*sin(end));
        endShape(CLOSE);
        stroke(0);
      }
    }
    if (tmp[0][1] != null) {
      y = (tmp[0][1].getY() - tmp[0][1].getSizeY()/2) - 1;
      float start = 0, end = 0;
      float objEdgeX = x, objEdgeZ = z;
      float XL = acos((tmp[0][1].getX()- tmp[0][1].getSizeX()/2 - x)/size);
      float XH = acos((tmp[0][1].getX()+ tmp[0][1].getSizeX()/2 - x)/size);
      float ZL = asin((tmp[0][1].getZ()- tmp[0][1].getSizeZ()/2 - z)/size);
      float ZH = asin((tmp[0][1].getZ()+ tmp[0][1].getSizeZ()/2 - z)/size);
      boolean onXL = !Float.isNaN(XL);
      boolean onXH = !Float.isNaN(XH);
      boolean onZL = !Float.isNaN(ZL);
      boolean onZH = !Float.isNaN(ZH);

      if (onXL && !onXH && onZL && !onZH) {
        start = ZL;
        end = min(XL, PI - ZL);
        objEdgeX = tmp[0][1].getX()- tmp[0][1].getSizeX()/2;
        objEdgeZ = tmp[0][1].getZ()- tmp[0][1].getSizeZ()/2;
      } else if (!onXL && !onXH && onZL && !onZH) {
        start = ZL;
        end = PI - ZL;
        objEdgeX = x;
        objEdgeZ = tmp[0][1].getZ()- tmp[0][1].getSizeZ()/2;
      } else if (!onXL && onXH && onZL && !onZH) {
        start = max(XH, ZL);
        end = PI - ZL;
        objEdgeX = tmp[0][1].getX()+ tmp[0][1].getSizeX()/2;
        objEdgeZ = tmp[0][1].getZ()- tmp[0][1].getSizeZ()/2;
      }
      //println(onXL, onXH, onZL);
      //println(start, end);
      if (start < end) {
        fill(0);
        noStroke();
        beginShape();
        vertex(objEdgeX, y, objEdgeZ);
        vertex(x + size*cos(start), y, z + size*sin(start));
        for (float theta = start; theta < end; theta += 0.1) {
          vertex(x + size*cos(theta), y, z + size*sin(theta));
        }
        vertex(x + size*cos(end), y, z + size*sin(end));
        endShape(CLOSE);
        stroke(0);
      }
    }
    if (tmp[0][2] != null) {
      y = (tmp[0][2].getY() - tmp[0][2].getSizeY()/2) - 1;
      float start = 0, end = 0;//
      float objEdgeX = x, objEdgeZ = z;
      float XL = acos((tmp[0][2].getX()- tmp[0][2].getSizeX()/2 - x)/size);//z軸と平行な直線のx座標
      float XH = acos((tmp[0][2].getX()+ tmp[0][2].getSizeX()/2 - x)/size);//from 0 to PI 
      float ZL = asin((tmp[0][2].getZ()- tmp[0][2].getSizeZ()/2 - z)/size);//from -PI/2 to PI/2
      float ZH = asin((tmp[0][2].getZ()+ tmp[0][2].getSizeZ()/2 - z)/size);
      boolean onXL = !Float.isNaN(XL);
      boolean onXH = !Float.isNaN(XH);
      boolean onZL = !Float.isNaN(ZL);
      boolean onZH = !Float.isNaN(ZH);
      if (onXL && !onXH && onZL && !onZH) {
        start = ZL;
        end = XL;
        objEdgeX = tmp[0][2].getX()- tmp[0][2].getSizeX()/2;
        objEdgeZ = tmp[0][2].getZ()- tmp[0][2].getSizeZ()/2;
      }
      //println(onXH, onZH);
      //println(start, end);
      if (start < end) {

        fill(0);
        noStroke();
        beginShape();
        vertex(objEdgeX, y, objEdgeZ);
        vertex(x + size*cos(start), y, z + size*sin(start));
        for (float theta = start; theta < end; theta += 0.1) {
          vertex(x + size*cos(theta), y, z + size*sin(theta));
        }
        vertex(x + size*cos(end), y, z + size*sin(end));
        endShape(CLOSE);
        stroke(0);
      }
    }
    if (tmp[1][0] != null) {
      y = (tmp[1][0].getY() - tmp[1][0].getSizeY()/2) - 1;
      float start = 0, end = 0;//
      float objEdgeX = x, objEdgeZ = z;
      float XL = acos((tmp[1][0].getX()- tmp[1][0].getSizeX()/2 - x)/size);
      float XH = acos((tmp[1][0].getX()+ tmp[1][0].getSizeX()/2 - x)/size); 
      float ZL = asin((tmp[1][0].getZ()- tmp[1][0].getSizeZ()/2 - z)/size);
      float ZH = asin((tmp[1][0].getZ()+ tmp[1][0].getSizeZ()/2 - z)/size);
      boolean onXL = !Float.isNaN(XL);
      boolean onXH = !Float.isNaN(XH);
      boolean onZL = !Float.isNaN(ZL);
      boolean onZH = !Float.isNaN(ZH);
      if (!onXL && onXH && !onZL && onZH) {
        start = max(PI - ZH, XH);
        end = TWO_PI - XH;
        objEdgeX = tmp[1][0].getX()+ tmp[1][0].getSizeX()/2;
        objEdgeZ = tmp[1][0].getZ()+ tmp[1][0].getSizeZ()/2;
      } else if (!onXL && onXH && !onZL && !onZH) {
        start = XH;
        end = TWO_PI - XH;
        objEdgeX = tmp[1][0].getX()+ tmp[1][0].getSizeX()/2;
        objEdgeZ = z;
      } else if (!onXL && onXH && onZL && !onZH) {
        start = XH;
        end = min(PI - ZL, TWO_PI - XH);
        objEdgeX = tmp[1][0].getX()+ tmp[1][0].getSizeX()/2;
        objEdgeZ = tmp[1][0].getZ()- tmp[1][0].getSizeZ()/2;
      }
      //println(onXH, onZH);
      //println(start, end);
      if (start < end || true) {

        fill(0);
        noStroke();
        beginShape();
        vertex(objEdgeX, y, objEdgeZ);
        vertex(x + size*cos(start), y, z + size*sin(start));
        for (float theta = start; theta < end; theta += 0.1) {
          vertex(x + size*cos(theta), y, z + size*sin(theta));
        }
        vertex(x + size*cos(end), y, z + size*sin(end));
        endShape(CLOSE);
        stroke(0);
      }
    }    
    if (tmp[1][1] != null) {
      y = (tmp[1][1].getY() - tmp[1][1].getSizeY()/2) - 1;
      float start1 = 0, end1 = 0, start2 = 0, end2 = 0;//
      float objEdgeX = x, objEdgeZ = z;
      float XL = acos((tmp[1][1].getX()- tmp[1][1].getSizeX()/2 - x)/size);
      float XH = acos((tmp[1][1].getX()+ tmp[1][1].getSizeX()/2 - x)/size); 
      float ZL = asin((tmp[1][1].getZ()- tmp[1][1].getSizeZ()/2 - z)/size);
      float ZH = asin((tmp[1][1].getZ()+ tmp[1][1].getSizeZ()/2 - z)/size);
      boolean onXL = !Float.isNaN(XL);
      boolean onXH = !Float.isNaN(XH);
      boolean onZL = !Float.isNaN(ZL);
      boolean onZH = !Float.isNaN(ZH);

      if (!onXL && !onXH && !onZL && !onZH) {
        start1 = 0;
        end1 = TWO_PI;
        objEdgeX = x;
        objEdgeZ = z;
      } else if (!onXL && onXH && !onZL && onZH) {
        start1 = PI - ZH;
        end1 = TWO_PI - XH;
        start2 = TWO_PI + XH;
        end2 = TWO_PI + ZH;
        objEdgeX = tmp[1][1].getX()+ tmp[1][1].getSizeX()/2;
        objEdgeZ = tmp[1][1].getZ()+ tmp[1][1].getSizeZ()/2;
      } else if (!onXL && !onXH && !onZL && onZH) {
        start1 = PI - ZH;
        end1 = TWO_PI + ZH;
        objEdgeX = x;
        objEdgeZ = tmp[1][1].getZ()+ tmp[1][1].getSizeZ()/2;
      } else if (onXL && !onXH && !onZL && onZH) {
        start1 = -XL;
        end1 = ZH;
        start2 = PI - ZH;
        end2 = XL;
        objEdgeX = tmp[1][1].getX()- tmp[1][1].getSizeX()/2;
        objEdgeZ = tmp[1][1].getZ()+ tmp[1][1].getSizeZ()/2;
      } else if (onXL && !onXH && !onZL && !onZH) {
        start1 = -XL;
        end1 = XL;
        objEdgeX = tmp[1][1].getX()- tmp[1][1].getSizeX()/2;
        objEdgeZ = z;
      } else if (onXL && !onXH && onZL && !onZH) {
        start1 = ZL;
        end1 = XL;
        start2 = TWO_PI - XL;
        end2 = PI - ZL;
        objEdgeX = tmp[1][1].getX()- tmp[1][1].getSizeX()/2;
        objEdgeZ = tmp[1][1].getZ()- tmp[1][1].getSizeZ()/2;
      } else if (!onXL && !onXH && onZL && !onZH) {
        start1 = ZL;
        end1 = PI - ZL;
        objEdgeX = x;
        objEdgeZ = tmp[1][1].getZ()- tmp[1][1].getSizeZ()/2;
      } else if (!onXL && onXH && onZL && !onZH) {
        start1 = XH;
        end1 = PI - ZL;
        start2 = TWO_PI + ZL;
        end2 = TWO_PI - XH;
        objEdgeX = tmp[1][1].getX()+ tmp[1][1].getSizeX()/2;
        objEdgeZ = tmp[1][1].getZ()- tmp[1][1].getSizeZ()/2;
      } else if (!onXL && onXH && !onZL && !onZH) {
        start1 = XH;
        end1 = TWO_PI - XH;
        objEdgeX = tmp[1][1].getX()+ tmp[1][1].getSizeX()/2;
        objEdgeZ = z;
      }
      //println(onXH, onZH);
      //println(start, end);
      if (start2 < end2) {//[0][0],[0][2],[2][0],[2][2]のマスに影が存在しないための条件式
        fill(0);
        noStroke();
        beginShape();
        //vertex(objEdgeX, y, objEdgeZ);
        vertex(x + size*cos(start1), y, z + size*sin(start1));
        for (float theta = start1; theta < end1; theta += 0.1) {
          vertex(x + size*cos(theta), y, z + size*sin(theta));
        }
        for (float theta = start2; theta < end2; theta += 0.1) {
          vertex(x + size*cos(theta), y, z + size*sin(theta));
        }
        vertex(x + size*cos(end2), y, z + size*sin(end2));
        endShape(CLOSE);
        stroke(0);
      } else {
        fill(0);
        noStroke();
        beginShape();
        vertex(objEdgeX, y, objEdgeZ);
        vertex(x + size*cos(start1), y, z + size*sin(start1));
        for (float theta = start1; theta < end1; theta += 0.1) {
          vertex(x + size*cos(theta), y, z + size*sin(theta));
        }
        vertex(x + size*cos(end1), y, z + size*sin(end1));
        endShape(CLOSE);
        stroke(0);
      }
    }
    if (tmp[1][2] != null) {
      y = (tmp[1][2].getY() - tmp[1][2].getSizeY()/2) - 1;
      float start = 0, end = 0;//
      float objEdgeX = x, objEdgeZ = z;
      float XL = acos((tmp[1][2].getX()- tmp[1][2].getSizeX()/2 - x)/size);
      float XH = acos((tmp[1][2].getX()+ tmp[1][2].getSizeX()/2 - x)/size); 
      float ZL = asin((tmp[1][2].getZ()- tmp[1][2].getSizeZ()/2 - z)/size);
      float ZH = asin((tmp[1][2].getZ()+ tmp[1][2].getSizeZ()/2 - z)/size);
      boolean onXL = !Float.isNaN(XL);
      boolean onXH = !Float.isNaN(XH);
      boolean onZL = !Float.isNaN(ZL);
      boolean onZH = !Float.isNaN(ZH);

      if (onXL && !onXH && !onZL && onZH) {
        start = -XL;
        end = min(ZH, XL);
        objEdgeX = tmp[1][2].getX()- tmp[1][2].getSizeX()/2;
        objEdgeZ = tmp[1][2].getZ()+ tmp[1][2].getSizeZ()/2;
      } else if (onXL && !onXH && !onZL && !onZH) {
        start = -XL;
        end = XL;
        objEdgeX = tmp[1][2].getX()- tmp[1][2].getSizeX()/2;
        objEdgeZ = z;
      } else if (onXL && !onXH && onZL && !onZH) {
        start = max(ZL, -XL);
        end = XL;
        objEdgeX = tmp[1][2].getX()- tmp[1][2].getSizeX()/2;
        objEdgeZ = tmp[1][2].getZ()- tmp[1][2].getSizeZ()/2;
      }

      if (start < end || true) {

        fill(0);
        noStroke();
        beginShape();
        vertex(objEdgeX, y, objEdgeZ);
        vertex(x + size*cos(start), y, z + size*sin(start));
        for (float theta = start; theta < end; theta += 0.1) {
          vertex(x + size*cos(theta), y, z + size*sin(theta));
        }
        vertex(x + size*cos(end), y, z + size*sin(end));
        endShape(CLOSE);
        stroke(0);
      }
    }
    if (tmp[2][0] != null) {
      y = (tmp[2][0].getY() - tmp[2][0].getSizeY()/2) - 1;
      float start = 0, end = 0;//
      float objEdgeX = x, objEdgeZ = z;
      float XL = acos((tmp[2][0].getX()- tmp[2][0].getSizeX()/2 - x)/size);
      float XH = acos((tmp[2][0].getX()+ tmp[2][0].getSizeX()/2 - x)/size); 
      float ZL = asin((tmp[2][0].getZ()- tmp[2][0].getSizeZ()/2 - z)/size);
      float ZH = asin((tmp[2][0].getZ()+ tmp[2][0].getSizeZ()/2 - z)/size);
      boolean onXL = !Float.isNaN(XL);
      boolean onXH = !Float.isNaN(XH);
      boolean onZL = !Float.isNaN(ZL);
      boolean onZH = !Float.isNaN(ZH);
      if (!onXL && onXH && !onZL && onZH) {
        start = PI - ZH;
        end = TWO_PI - XH;
        objEdgeX = tmp[2][0].getX()+ tmp[2][0].getSizeX()/2;
        objEdgeZ = tmp[2][0].getZ()+ tmp[2][0].getSizeZ()/2;
      }
      //println(onXH, onZH);
      //println(start, end);
      if (start < end) {

        fill(0);
        noStroke();
        beginShape();
        vertex(objEdgeX, y, objEdgeZ);
        vertex(x + size*cos(start), y, z + size*sin(start));
        for (float theta = start; theta < end; theta += 0.1) {
          vertex(x + size*cos(theta), y, z + size*sin(theta));
        }
        vertex(x + size*cos(end), y, z + size*sin(end));
        endShape(CLOSE);
        stroke(0);
      }
    }
    if (tmp[2][1] != null) {
      y = (tmp[2][1].getY() - tmp[2][1].getSizeY()/2) - 1;
      float start = 0, end = 0;//
      float objEdgeX = x, objEdgeZ = z;
      float XL = acos((tmp[2][1].getX()- tmp[2][1].getSizeX()/2 - x)/size);
      float XH = acos((tmp[2][1].getX()+ tmp[2][1].getSizeX()/2 - x)/size); 
      float ZL = asin((tmp[2][1].getZ()- tmp[2][1].getSizeZ()/2 - z)/size);
      float ZH = asin((tmp[2][1].getZ()+ tmp[2][1].getSizeZ()/2 - z)/size);
      boolean onXL = !Float.isNaN(XL);
      boolean onXH = !Float.isNaN(XH);
      boolean onZL = !Float.isNaN(ZL);
      boolean onZH = !Float.isNaN(ZH);

      if (onXL && !onXH && !onZL && onZH) {
        start = max(TWO_PI - XL, PI - ZH);
        end = TWO_PI + ZH;
        objEdgeX = tmp[2][1].getX()- tmp[2][1].getSizeX()/2;
        objEdgeZ = tmp[2][1].getZ()+ tmp[2][1].getSizeZ()/2;
      } else if (!onXL && !onXH && !onZL && onZH) {
        start = PI - ZH;
        end = TWO_PI + ZH;
        objEdgeX = x;
        objEdgeZ = tmp[2][1].getZ()+ tmp[2][1].getSizeZ()/2;
      } else if (!onXL && onXH && !onZL && onZH) {
        start = PI - ZH;
        end = min(TWO_PI - XH, TWO_PI + ZH);
        objEdgeX = tmp[2][1].getX()+ tmp[2][1].getSizeX()/2;
        objEdgeZ = tmp[2][1].getZ()+ tmp[2][1].getSizeZ()/2;
      }

      fill(0);
      noStroke();
      beginShape();
      vertex(objEdgeX, y, objEdgeZ);
      vertex(x + size*cos(start), y, z + size*sin(start));
      for (float theta = start; theta < end; theta += 0.1) {
        vertex(x + size*cos(theta), y, z + size*sin(theta));
      }
      vertex(x + size*cos(end), y, z + size*sin(end));
      endShape(CLOSE);
      stroke(0);
    }
    if (tmp[2][2] != null) {
      y = (tmp[2][2].getY() - tmp[2][2].getSizeY()/2) - 1;
      float start = 0, end = 0;//
      float objEdgeX = x, objEdgeZ = z;
      float XL = acos((tmp[2][2].getX()- tmp[2][2].getSizeX()/2 - x)/size);
      float XH = acos((tmp[2][2].getX()+ tmp[2][2].getSizeX()/2 - x)/size); 
      float ZL = asin((tmp[2][2].getZ()- tmp[2][2].getSizeZ()/2 - z)/size);
      float ZH = asin((tmp[2][2].getZ()+ tmp[2][2].getSizeZ()/2 - z)/size);
      boolean onXL = !Float.isNaN(XL);
      boolean onXH = !Float.isNaN(XH);
      boolean onZL = !Float.isNaN(ZL);
      boolean onZH = !Float.isNaN(ZH);

      if (onXL && !onXH && !onZL && onZH) {
        start = -XL;
        end = ZH;
        objEdgeX = tmp[2][2].getX()- tmp[2][2].getSizeX()/2;
        objEdgeZ = tmp[2][2].getZ()+ tmp[2][2].getSizeZ()/2;
      }
      if (start < end) {
        fill(0);
        noStroke();
        beginShape();
        vertex(objEdgeX, y, objEdgeZ);
        vertex(x + size*cos(start), y, z + size*sin(start));
        for (float theta = start; theta < end; theta += 0.1) {
          vertex(x + size*cos(theta), y, z + size*sin(theta));
        }
        vertex(x + size*cos(end), y, z + size*sin(end));
        endShape(CLOSE);
        stroke(0);
      }
    }